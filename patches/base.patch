diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..095e840
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+*.o
+dwm
diff --git a/config.def.h b/config.def.h
deleted file mode 100644
index 1c0b587..0000000
--- a/config.def.h
+++ /dev/null
@@ -1,115 +0,0 @@
-/* See LICENSE file for copyright and license details. */
-
-/* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
-static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
-};
-
-/* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
-
-static const Rule rules[] = {
-	/* xprop(1):
-	 *	WM_CLASS(STRING) = instance, class
-	 *	WM_NAME(STRING) = title
-	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
-};
-
-/* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
-static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
-
-static const Layout layouts[] = {
-	/* symbol     arrange function */
-	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
-	{ "[M]",      monocle },
-};
-
-/* key definitions */
-#define MODKEY Mod1Mask
-#define TAGKEYS(KEY,TAG) \
-	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
-	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
-	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
-
-/* helper for spawning shell commands in the pre dwm-5.0 fashion */
-#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
-
-/* commands */
-static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
-
-static Key keys[] = {
-	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
-	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
-	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
-	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
-	TAGKEYS(                        XK_1,                      0)
-	TAGKEYS(                        XK_2,                      1)
-	TAGKEYS(                        XK_3,                      2)
-	TAGKEYS(                        XK_4,                      3)
-	TAGKEYS(                        XK_5,                      4)
-	TAGKEYS(                        XK_6,                      5)
-	TAGKEYS(                        XK_7,                      6)
-	TAGKEYS(                        XK_8,                      7)
-	TAGKEYS(                        XK_9,                      8)
-	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
-};
-
-/* button definitions */
-/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
-static Button buttons[] = {
-	/* click                event mask      button          function        argument */
-	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
-	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
-	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
-	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
-	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
-	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
-	{ ClkTagBar,            0,              Button1,        view,           {0} },
-	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
-	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
-	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
-};
-
diff --git a/config.h b/config.h
new file mode 100644
index 0000000..53bf587
--- /dev/null
+++ b/config.h
@@ -0,0 +1,210 @@
+#include <X11/XF86keysym.h>
+
+/* general */
+static const unsigned int borderpx  = 1;        /* border pixel of windows */
+static const unsigned int snap      = 32;       /* snap pixel */
+static const int showbar            = 1;        /* 0 means no bar */
+static const int topbar             = 1;        /* 0 means bottom bar */
+static const char *fonts[]          = { "monospace:size=10" };
+
+/* appearance */
+static char normbgcolor[]           = "#222222";
+static char normbordercolor[]       = "#444444";
+static char normfgcolor[]           = "#bbbbbb";
+static char selfgcolor[]            = "#eeeeee";
+static char selbordercolor[]        = "#005577";
+static char selbgcolor[]            = "#005577";
+static char titlebgcolor[]          = "#005577";
+static char titlefgcolor[]          = "#eeeeee";
+static char titlebordercolor[]      = "#005577";
+
+static char *colors[][3] = {
+  [SchemeNorm]   = { normfgcolor,    normbgcolor,        normbordercolor   },
+  [SchemeSel]    = { selfgcolor,     selbgcolor,         selbordercolor    },
+  [SchemeTitle]  = { titlefgcolor,   titlebgcolor,       titlebordercolor  },
+};
+
+/* tagging */
+static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+static const Rule rules[] = {
+  /* xprop(1):
+   *	WM_CLASS(STRING) = instance, class
+   *	WM_NAME(STRING) = title
+   */
+	/* class        instance       title           tags mask  isfloating  isterminal  noswallow   monitor */
+	{ NULL,         "ferdi",       NULL,           1 << 3,    0,          0,          0,            1 },
+	{ "firefox",    NULL,          NULL,           1 << 1,    0,          0,          1,           -1 },
+	{ "Gimp",       NULL,          NULL,           1 << 8,    0,          0,          0,           -1 },
+  { "mpv",        NULL,          NULL,           0,         0,          0,          1,           -1 },
+  { "mpv",        NULL,          "F1MAIN",       1 << 2,    0,          0,          1,           -1 },
+  { "mpv",        NULL,          "F1VERSTAPPEN", 1 << 3,    0,          0,          1,           -1 },
+  { "mpv",        NULL,          "F1NORRIS",     1 << 4,    0,          0,          1,           -1 },
+  { "St",         NULL,          NULL,           0,         0,          1,          0,           -1 },
+	{ "spotify",    NULL,          NULL,           1 << 4,    0,          0,          0,            1 },
+  { NULL,         NULL,          "Event Tester", 0,         1,          0,          1,           -1 },
+};
+
+/* layout(s) */
+static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const int nmaster     = 1;    /* number of clients in master area */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
+
+static const Layout layouts[] = {
+  /* symbol     arrange function */
+  { "[]=",      tile           },
+	{ "|M|",      centeredmaster },
+};
+
+/* key definitions */
+#define MODKEY Mod4Mask
+#define TAGKEYS(KEY,TAG) \
+{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
+{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
+{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
+{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
+
+/* helper for spawning shell commands in the pre dwm-5.0 fashion */
+#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
+
+/* commands */
+static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, NULL };
+static const char *termcmd[]  = { "st", NULL };
+
+static Key keys[] = {
+  /* general */
+  { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd }     },
+  { MODKEY,                       XK_b,      togglebar,      {0}                  },
+  { MODKEY,                       XK_j,      focusstack,     {.i = +1 }           },
+  { MODKEY,                       XK_k,      focusstack,     {.i = -1 }           },
+  { MODKEY,                       XK_i,      incnmaster,     {.i = +1 }           },
+  { MODKEY,                       XK_d,      incnmaster,     {.i = -1 }           },
+  { MODKEY,                       XK_h,      setmfact,       {.f = -0.05}         },
+  { MODKEY,                       XK_l,      setmfact,       {.f = +0.05}         },
+  { MODKEY,                       XK_Tab,    view,           {0}                  },
+  { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]}   },
+  { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]}   },
+  { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]}   },
+  { MODKEY,                       XK_space,  setlayout,      {0}                  },
+  { MODKEY|ShiftMask,             XK_space,  togglefloating, {0}                  },
+  { MODKEY,                       XK_0,      view,           {.ui = ~0 }          },
+  { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 }          },
+  { MODKEY,                       XK_comma,  focusmon,       {.i = -1 }           },
+  { MODKEY,                       XK_period, focusmon,       {.i = +1 }           },
+  { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 }           },
+  { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 }           },
+	{ MODKEY,			                  XK_q,		   killclient,	   {0}                  },
+
+  /* applications */
+	{ MODKEY,			              XK_d,		                  spawn,          {.v = dmenucmd } },
+	{ MODKEY,			              XK_Return,                spawn,		      {.v = termcmd } },
+	{ MODKEY|ShiftMask,		      XK_Return,                spawn,	        SHCMD("samedir") },
+	{ MODKEY|ShiftMask,			    XK_w,		                  spawn,		      SHCMD("$BROWSER") },
+  { MODKEY|ShiftMask,		      XK_m,		                  spawn,		      SHCMD("amixer -q set Master mute") },
+	{ MODKEY,			              XK_section,	              spawn,	        SHCMD("dmenuunicode") },
+	{ MODKEY,		                XK_m,		                  spawn,		      SHCMD("st -e ncmpcpp") },
+	{ MODKEY,			              XK_x,		                  spawn,		      SHCMD("betterlockscreen -l dim") },
+	{ MODKEY,			              XK_End,	                  spawn,	        SHCMD("pkill -USR1 \"^redshift$\"") },
+	{ MODKEY,			              XK_n,		                  spawn,	      	SHCMD("st -e newsboat; pkill -RTMIN+6 dwmblocks") },
+	{ MODKEY|ShiftMask,		      XK_a,		                  spawn,		      SHCMD("st -e pulsemixer; pkill -RTMIN+10 dwmblocks") },
+	{ MODKEY,			              XK_e,		                  spawn,		      SHCMD("st -e neomutt ; pkill -RTMIN+12 dwmblocks; rmdir ~/.abook") },
+	{ MODKEY|ShiftMask,		      XK_c,		                  spawn,		      SHCMD("mpv --no-cache --no-osc --no-input-default-bindings --input-conf=/dev/null --title=mpvfloat $(ls /dev/video[0,2,4,6,8] | tail -n 1)") },
+
+  /* function keys */
+	{ MODKEY,			              XK_F2,		                spawn,		      SHCMD("set-system-colorscheme") },
+	{ MODKEY,			              XK_F3,		                spawn,		      SHCMD("displayselect") },
+	{ MODKEY,			              XK_F4,		                spawn,		      SHCMD("prompt 'Hibernate computer?' 'sudo systemctl suspend'") },
+	{ MODKEY,			              XK_F8,		                spawn,		      SHCMD("mailsync") },
+	{ MODKEY,			              XK_F9,		                spawn,		      SHCMD("dmenumount") },
+	{ MODKEY,			              XK_F10,		                spawn,		      SHCMD("dmenuumount") },
+
+  /* special keys (spawners) */
+	{ MODKEY,	                  XK_Insert,	              spawn,		      SHCMD("switch-kb-layout") },
+	{ ShiftMask,	              XK_Print,	                spawn,		      SHCMD("maimpick") },
+	{ 0,                        XF86XK_WWW,		            spawn,	        SHCMD("$BROWSER") },
+	{ 0,                        XF86XK_TaskPane,		      spawn,	        SHCMD("st -e htop") },
+	{ 0,                        XF86XK_MyComputer,		    spawn,	        SHCMD("st -e lf /") },
+	{ 0,                        XF86XK_Calculator,		    spawn,	        SHCMD("st -e bc -l") },
+	{ MODKEY,			              XK_Print,	                spawn,		      SHCMD("dmenurecord") },
+	{ 0,                        XF86XK_AudioMedia,		    spawn,	        SHCMD("st -e ncmpcpp") },
+	{ MODKEY|ShiftMask,		      XK_Print,	                spawn,		      SHCMD("dmenurecord kill") },
+	{ MODKEY,			              XK_Delete,                spawn,		      SHCMD("dmenurecord kill") },
+	{ 0,                        XF86XK_Launch1,		        spawn,	        SHCMD("xset dpms force off") },
+	{ 0,                        XF86XK_ScreenSaver,	      spawn,	        SHCMD("betterlockscreen -l dim") },
+	{ MODKEY,			              XK_Scroll_Lock,	          spawn,		      SHCMD("killall screenkey || screenkey &") },
+	{ 0,                        XF86XK_Mail,		          spawn,	        SHCMD("st -e neomutt ; pkill -RTMIN+12 dwmblocks") },
+	{ 0,                        XF86XK_Sleep,		          spawn,	        SHCMD("prompt 'Hibernate computer?' 'sudo -A zzz'") },
+	{ 0,				                XK_Print,	                spawn,		      SHCMD("maim -s -u | xclip -selection clipboard -t image/png") },
+	{ 0,                        XF86XK_PowerOff,		      spawn,	        SHCMD("prompt 'Shutdown computer?' 'sudo -A shutdown -h now'") },
+
+  /* media */
+	{ 0,                        XF86XK_AudioRewind,	      spawn,	        SHCMD("mpc seek -10") },
+	{ 0,                        XF86XK_AudioForward,	    spawn,	        SHCMD("mpc seek +10") },
+	{ 0,                        XF86XK_AudioStop,		      spawn,	        SHCMD("mpc stop; playerctl stop; pkill -RTMIN+11 dwmblocks") },
+	{ 0,                        XF86XK_AudioPrev,		      spawn,	        SHCMD("mpc prev; playerctl previous; pkill -RTMIN+11 dwmblocks") },
+	{ 0,                        XF86XK_AudioNext,		      spawn,	        SHCMD("mpc next; playerctl next; pkill -RTMIN+11 dwmblocks") },
+	{ 0,                        XF86XK_AudioPause,		    spawn,	        SHCMD("mpc toggle; playerctl play-pause; pkill -RTMIN+11 dwmblocks") },
+	{ 0,                        XF86XK_AudioPlay,		      spawn,	        SHCMD("mpc toggle; playerctl play-pause; pkill -RTMIN+11 dwmblocks") },
+	{ 0,                        XF86XK_AudioMute,		      spawn,		      SHCMD("pamixer -t; kill -44 $(pidof dwmblocks)") },
+	{ 0,                        XF86XK_AudioRaiseVolume,	spawn,		      SHCMD("pamixer -u -i 3; kill -44 $(pidof dwmblocks)") },
+	{ 0,                        XF86XK_AudioLowerVolume,	spawn,		      SHCMD("pamixer -u -d 3; kill -44 $(pidof dwmblocks)") },
+
+  /* backlighting */
+  { 0,                        XF86XK_MonBrightnessUp,	  spawn,	        SHCMD("xbacklight -inc 11") },
+	{ 0,                        XF86XK_MonBrightnessDown,	spawn,	        SHCMD("xbacklight -dec 11") },
+
+  /* tags */
+  TAGKEYS(                        XK_1,                      0)
+  TAGKEYS(                        XK_2,                      1)
+  TAGKEYS(                        XK_3,                      2)
+  TAGKEYS(                        XK_4,                      3)
+  TAGKEYS(                        XK_5,                      4)
+  TAGKEYS(                        XK_6,                      5)
+  TAGKEYS(                        XK_7,                      6)
+  TAGKEYS(                        XK_8,                      7)
+  TAGKEYS(                        XK_9,                      8)
+};
+
+/* button definitions */
+/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
+static Button buttons[] = {
+  /* click                event mask      button          function        argument */
+  { ClkLtSymbol,          0,              Button1,        setlayout,      {0}                },
+  { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
+  { ClkWinTitle,          0,              Button2,        zoom,           {0}                },
+  { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd }    },
+  { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0}                },
+  { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0}                },
+  { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0}                },
+  { ClkTagBar,            0,              Button1,        view,           {0}                },
+  { ClkTagBar,            0,              Button3,        toggleview,     {0}                },
+  { ClkTagBar,            MODKEY,         Button1,        tag,            {0}                },
+  { ClkTagBar,            MODKEY,         Button3,        toggletag,      {0}                },
+};
+
+/* signal definitions */
+/* signum must be greater than 0 */
+/* trigger signals using `xsetroot -name "fsignal:<signame> [<type> <value>]"` */
+static Signal signals[] = {
+	{ "focusstack",     focusstack      },
+	{ "setmfact",       setmfact        },
+	{ "togglebar",      togglebar       },
+	{ "incnmaster",     incnmaster      },
+	{ "togglefloating", togglefloating  },
+	{ "focusmon",       focusmon        },
+	{ "tagmon",         tagmon          },
+	{ "zoom",           zoom            },
+	{ "view",           view            },
+	{ "viewall",        viewall         },
+	{ "viewex",         viewex          },
+	{ "toggleview",     view            },
+	{ "toggleviewex",   toggleviewex    },
+	{ "tag",            tag             },
+	{ "tagall",         tagall          },
+	{ "tagex",          tagex           },
+	{ "toggletag",      tag             },
+	{ "toggletagex",    toggletagex     },
+	{ "killclient",     killclient      },
+	{ "setlayout",      setlayout       },
+	{ "setlayoutex",    setlayoutex     },
+};
diff --git a/drw.c b/drw.c
index 4cdbcbe..8f1059e 100644
--- a/drw.c
+++ b/drw.c
@@ -208,7 +208,7 @@ drw_clr_create(Drw *drw, Clr *dest, const char *clrname)
 /* Wrapper to create color schemes. The caller has to call free(3) on the
  * returned color scheme when done using it. */
 Clr *
-drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)
+drw_scm_create(Drw *drw, char *clrnames[], size_t clrcount)
 {
 	size_t i;
 	Clr *ret;
diff --git a/drw.h b/drw.h
index 4bcd5ad..42b04ce 100644
--- a/drw.h
+++ b/drw.h
@@ -39,7 +39,7 @@ void drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned in
 
 /* Colorscheme abstraction */
 void drw_clr_create(Drw *drw, Clr *dest, const char *clrname);
-Clr *drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount);
+Clr *drw_scm_create(Drw *drw, char *clrnames[], size_t clrcount);
 
 /* Cursor abstraction */
 Cur *drw_cur_create(Drw *drw, int shape);
diff --git a/dwm.c b/dwm.c
index 664c527..afcb389 100644
--- a/dwm.c
+++ b/dwm.c
@@ -58,14 +58,14 @@
 #define TEXTW(X)                (drw_fontset_getwidth(drw, (X)) + lrpad)
 
 /* enums */
-enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum { CurNormal, CurResize, CurMove, CurLast               }; /* cursor */
+enum { SchemeNorm, SchemeSel, SchemeTitle                   }; /* color schemes */
+enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast  }; /* default atoms */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
-       NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
-enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; /* default atoms */
+       NetWMWindowTypeDialog, NetClientList, NetLast        }; /* EWMH atoms */
 enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,
-       ClkClientWin, ClkRootWin, ClkLast }; /* clicks */
+       ClkClientWin, ClkRootWin, ClkLast                    }; /* clicks */
 
 typedef union {
 	int i;
@@ -138,9 +138,16 @@ typedef struct {
 	const char *title;
 	unsigned int tags;
 	int isfloating;
+  int isterminal;
+  int noswallow;
 	int monitor;
 } Rule;
 
+typedef struct {
+	const char *sig;
+	void (*func)(const Arg*);
+} Signal;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -149,6 +156,7 @@ static void arrangemon(Monitor *m);
 static void attach(Client *c);
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
+static void centeredmaster(Monitor *m);
 static void checkotherwm(void);
 static void cleanup(void);
 static void cleanupmon(Monitor *mon);
@@ -181,13 +189,11 @@ static void killclient(const Arg *arg);
 static void manage(Window w, XWindowAttributes *wa);
 static void mappingnotify(XEvent *e);
 static void maprequest(XEvent *e);
-static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
 static Client *nexttiled(Client *c);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
-static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
 static void resize(Client *c, int x, int y, int w, int h, int interact);
 static void resizeclient(Client *c, int x, int y, int w, int h);
@@ -201,6 +207,7 @@ static void setclientstate(Client *c, long state);
 static void setfocus(Client *c);
 static void setfullscreen(Client *c, int fullscreen);
 static void setlayout(const Arg *arg);
+static void setlayoutex(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setup(void);
 static void seturgent(Client *c, int urg);
@@ -208,12 +215,16 @@ static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
+static void tagall(const Arg *arg);
+static void tagex(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
+static void toggletagex(const Arg *arg);
 static void toggleview(const Arg *arg);
+static void toggleviewex(const Arg *arg);
 static void unfocus(Client *c, int setfocus);
 static void unmanage(Client *c, int destroyed);
 static void unmapnotify(XEvent *e);
@@ -228,6 +239,8 @@ static void updatetitle(Client *c);
 static void updatewindowtype(Client *c);
 static void updatewmhints(Client *c);
 static void view(const Arg *arg);
+static void viewall(const Arg *arg);
+static void viewex(const Arg *arg);
 static Client *wintoclient(Window w);
 static Monitor *wintomon(Window w);
 static int xerror(Display *dpy, XErrorEvent *ee);
@@ -1101,21 +1114,6 @@ maprequest(XEvent *e)
 		manage(ev->window, &wa);
 }
 
-void
-monocle(Monitor *m)
-{
-	unsigned int n = 0;
-	Client *c;
-
-	for (c = m->clients; c; c = c->next)
-		if (ISVISIBLE(c))
-			n++;
-	if (n > 0) /* override layout symbol */
-		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
-	for (c = nexttiled(m->clients); c; c = nexttiled(c->next))
-		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
-}
-
 void
 motionnotify(XEvent *e)
 {
@@ -1246,12 +1244,6 @@ propertynotify(XEvent *e)
 	}
 }
 
-void
-quit(const Arg *arg)
-{
-	running = 0;
-}
-
 Monitor *
 recttomon(int x, int y, int w, int h)
 {
@@ -1512,6 +1504,12 @@ setlayout(const Arg *arg)
 		drawbar(selmon);
 }
 
+void
+setlayoutex(const Arg *arg)
+{
+	setlayout(&((Arg){.v = &layouts[arg->i]}));
+}
+
 /* arg > 1.0 will set mfact absolutely */
 void
 setmfact(const Arg *arg)
@@ -1663,6 +1661,18 @@ tag(const Arg *arg)
 	}
 }
 
+void
+tagall(const Arg *arg)
+{
+	tag(&((Arg){.ui = ~0}));
+}
+
+void
+tagex(const Arg *arg)
+{
+	tag(&((Arg){ .ui = 1 << arg->ui }));
+}
+
 void
 tagmon(const Arg *arg)
 {
@@ -1699,6 +1709,61 @@ tile(Monitor *m)
 		}
 }
 
+void
+centeredmaster(Monitor *m)
+{
+	unsigned int i, n, h, mw, mx, my, oty, ety, tw;
+	Client *c;
+
+	/* count number of clients in the selected monitor */
+	for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	if (n == 0)
+		return;
+
+	/* initialize areas */
+	mw = m->ww;
+	mx = 0;
+	my = 0;
+	tw = mw;
+
+	if (n > m->nmaster) {
+		/* go mfact box in the center if more than nmaster clients */
+		mw = m->nmaster ? m->ww * m->mfact : 0;
+		tw = m->ww - mw;
+
+		if (n - m->nmaster > 1) {
+			/* only one client */
+			mx = (m->ww - mw) / 2;
+			tw = (m->ww - mw) / 2;
+		}
+	}
+
+	oty = 0;
+	ety = 0;
+	for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+	if (i < m->nmaster) {
+		/* nmaster clients are stacked vertically, in the center
+		 * of the screen */
+		h = (m->wh - my) / (MIN(n, m->nmaster) - i);
+		resize(c, m->wx + mx, m->wy + my, mw - (2*c->bw),
+		       h - (2*c->bw), 0);
+		my += HEIGHT(c);
+	} else {
+		/* stack clients are stacked vertically */
+		if ((i - m->nmaster) % 2 ) {
+			h = (m->wh - ety) / ( (1 + n - i) / 2);
+			resize(c, m->wx, m->wy + ety, tw - (2*c->bw),
+			       h - (2*c->bw), 0);
+			ety += HEIGHT(c);
+		} else {
+			h = (m->wh - oty) / ((1 + n - i) / 2);
+			resize(c, m->wx + mx + mw, m->wy + oty,
+			       tw - (2*c->bw), h - (2*c->bw), 0);
+			oty += HEIGHT(c);
+		}
+	}
+}
+
 void
 togglebar(const Arg *arg)
 {
@@ -1737,6 +1802,12 @@ toggletag(const Arg *arg)
 	}
 }
 
+void
+toggletagex(const Arg *arg)
+{
+	toggletag(&((Arg){.ui = 1 << arg->ui}));
+}
+
 void
 toggleview(const Arg *arg)
 {
@@ -1749,6 +1820,12 @@ toggleview(const Arg *arg)
 	}
 }
 
+void
+toggleviewex(const Arg *arg)
+{
+	toggleview(&((Arg){.ui = 1 << arg->ui}));
+}
+
 void
 unfocus(Client *c, int setfocus)
 {
@@ -2047,6 +2124,18 @@ view(const Arg *arg)
 	arrange(selmon);
 }
 
+void
+viewall(const Arg *arg)
+{
+	view(&((Arg){.ui = ~0}));
+}
+
+void
+viewex(const Arg *arg)
+{
+	view(&((Arg){.ui = 1 << arg->ui}));
+}
+
 Client *
 wintoclient(Window w)
 {
